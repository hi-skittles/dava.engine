From c0c0ef6e0b119b0eb869ba738889546e32eac072 Mon Sep 17 00:00:00 2001
From: Artem Lapitskiy <a_lapitskiy@wargaming.net>
Date: Fri, 4 Dec 2015 13:05:56 +0300
Subject: [PATCH 1/3] Added VS_SDK_REFERENCE_DIRECTORY_ROOT project property
 support

---
 Source/cmVisualStudio10TargetGenerator.cxx | 16 ++++++++++++++++
 Source/cmVisualStudio10TargetGenerator.h   |  1 +
 2 files changed, 17 insertions(+)

diff --git a/Source/cmVisualStudio10TargetGenerator.cxx b/Source/cmVisualStudio10TargetGenerator.cxx
index b9dd269..38e5e87 100644
--- a/Source/cmVisualStudio10TargetGenerator.cxx
+++ b/Source/cmVisualStudio10TargetGenerator.cxx
@@ -497,6 +497,7 @@ void cmVisualStudio10TargetGenerator::Generate()
   this->WriteWinRTReferences();
   this->WriteProjectReferences();
   this->WriteSDKReferences();
+  this->WriteSDKReferenceDirectoryRoot();
   this->WriteString(
     "<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\""
     " />\n", 1);
@@ -3078,6 +3079,21 @@ void cmVisualStudio10TargetGenerator::WriteSinglePlatformExtension(
     << extension << ".props')\" />\n";
 }
 
+void cmVisualStudio10TargetGenerator::WriteSDKReferenceDirectoryRoot()
+{
+    const char* sdkReferenceDirectoryRoot =
+        this->Target->GetProperty("VS_SDK_REFERENCE_DIRECTORY_ROOT");
+
+    if (sdkReferenceDirectoryRoot)
+    {
+        this->WriteString("<PropertyGroup>\n", 1);
+        this->WriteString("<SDKReferenceDirectoryRoot>", 2);
+        (*this->BuildFileStream) << sdkReferenceDirectoryRoot
+            << ";$(SDKReferenceDirectoryRoot)</SDKReferenceDirectoryRoot>\n";
+        this->WriteString("</PropertyGroup>\n", 1);
+    }
+}
+
 void cmVisualStudio10TargetGenerator::WriteSDKReferences()
 {
   // This only applies to Windows 10 apps
diff --git a/Source/cmVisualStudio10TargetGenerator.h b/Source/cmVisualStudio10TargetGenerator.h
index 405452c..47487e1 100644
--- a/Source/cmVisualStudio10TargetGenerator.h
+++ b/Source/cmVisualStudio10TargetGenerator.h
@@ -132,6 +132,7 @@ class cmVisualStudio10TargetGenerator
   void WritePlatformExtensions();
   void WriteSinglePlatformExtension(std::string const& extension,
                                     std::string const& version);
+  void WriteSDKReferenceDirectoryRoot();
   void WriteSDKReferences();
   void WriteSingleSDKReference(std::string const& extension,
                                std::string const& version);

From df7d7c52378ba25026020f0748d3eb8412430e26 Mon Sep 17 00:00:00 2001
From: Artem Lapitskiy <a_lapitskiy@wargaming.net>
Date: Fri, 4 Dec 2015 17:27:29 +0300
Subject: [PATCH 2/3] Added command 'add_target_vs_extension_sdk'

---
 Source/CMakeLists.txt                       |   1 +
 Source/cmAddTargetVsExtensionSdkCommand.cxx | 111 ++++++++++++++++++++++++++++
 Source/cmAddTargetVsExtensionSdkCommand.h   |  58 +++++++++++++++
 Source/cmVisualStudio10TargetGenerator.cxx  |  67 +++++++++++------
 Source/cmVisualStudio10TargetGenerator.h    |   1 +
 5 files changed, 216 insertions(+), 22 deletions(-)
 create mode 100644 Source/cmAddTargetVsExtensionSdkCommand.cxx
 create mode 100644 Source/cmAddTargetVsExtensionSdkCommand.h

diff --git a/Source/CMakeLists.txt b/Source/CMakeLists.txt
index 3795218..1c6b579 100644
--- a/Source/CMakeLists.txt
+++ b/Source/CMakeLists.txt
@@ -380,6 +380,7 @@ set_property(SOURCE cmTargetPropCommandBase.cxx PROPERTY HEADER_FILE_ONLY ON)
 set(NEW_COMMANDS "")
 foreach(command_file
     cmAddCompileOptionsCommand
+    cmAddTargetVsExtensionSdkCommand
     cmAuxSourceDirectoryCommand
     cmBuildNameCommand
     cmCMakeHostSystemInformationCommand
diff --git a/Source/cmAddTargetVsExtensionSdkCommand.cxx b/Source/cmAddTargetVsExtensionSdkCommand.cxx
new file mode 100644
index 0000000..2df2c27
--- /dev/null
+++ b/Source/cmAddTargetVsExtensionSdkCommand.cxx
@@ -0,0 +1,111 @@
+/*============================================================================
+CMake - Cross Platform Makefile Generator
+Copyright 2000-2009 Kitware, Inc., Insight Software Consortium
+
+Distributed under the OSI-approved BSD License (the "License");
+see accompanying file Copyright.txt for details.
+
+This software is distributed WITHOUT ANY WARRANTY; without even the
+implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+See the License for more information.
+============================================================================*/
+#include "cmAddTargetVsExtensionSdkCommand.h"
+
+#include <sstream>
+
+//----------------------------------------------------------------------------
+bool cmAddTargetVsExtensionSdkCommand
+::InitialPass(std::vector<std::string> const& args, cmExecutionStatus &)
+{
+    // only compile this for win32 to avoid coverage errors
+#ifdef _WIN32
+    if (this->Makefile->GetDefinition("WIN32"))
+    {
+        return this->HandleArguments(args);
+    }
+#endif
+    return true;
+}
+
+bool cmAddTargetVsExtensionSdkCommand
+::HandleArguments(std::vector<std::string> const& args)
+{
+    if (args.size() != 3)
+    {
+        this->SetError("called with incorrect number of arguments");
+        return false;
+    }
+    const std::string &targetName = args[0];
+
+    if (this->Makefile->IsAlias(targetName))
+    {
+        this->SetError("can not be used on an ALIAS target.");
+        return false;
+    }
+    cmTarget *target =
+        this->Makefile->GetCMakeInstance()
+        ->GetGlobalGenerator()->FindTarget(targetName);
+    if (!target)
+    {
+        target = this->Makefile->FindTargetToUse(targetName);
+    }
+    if (!target)
+    {
+        this->HandleMissingTarget(targetName);
+        return false;
+    }
+    if ((target->GetType() != cmTarget::SHARED_LIBRARY)
+        && (target->GetType() != cmTarget::STATIC_LIBRARY)
+        && (target->GetType() != cmTarget::OBJECT_LIBRARY)
+        && (target->GetType() != cmTarget::MODULE_LIBRARY)
+        && (target->GetType() != cmTarget::INTERFACE_LIBRARY)
+        && (target->GetType() != cmTarget::EXECUTABLE))
+    {
+        this->SetError("called with non-compilable target type");
+        return false;
+    }
+
+    const std::string &sdkName = args[1];
+    const std::string &sdkVersion = args[2];
+
+    this->HandleArgs(target, sdkName, sdkVersion);
+
+    return true;
+}
+
+//----------------------------------------------------------------------------
+void cmAddTargetVsExtensionSdkCommand
+::HandleImportedTarget(const std::string &tgt)
+{
+    std::ostringstream e;
+    e << "Cannot specify SDK References for imported target \""
+        << tgt << "\".";
+    this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
+}
+
+//----------------------------------------------------------------------------
+void cmAddTargetVsExtensionSdkCommand
+::HandleMissingTarget(const std::string &name)
+{
+    std::ostringstream e;
+    e << "Cannot specify SDK References for target \"" << name << "\" "
+        "which is not built by this project.";
+    this->Makefile->IssueMessage(cmake::FATAL_ERROR, e.str());
+}
+
+//----------------------------------------------------------------------------
+std::string cmAddTargetVsExtensionSdkCommand
+::Join(const std::string &sdkName, const std::string &sdkVersion)
+{
+    std::ostringstream os;
+    os << sdkName << ", Version=" << sdkVersion;
+
+    return os.str();
+}
+
+//----------------------------------------------------------------------------
+void cmAddTargetVsExtensionSdkCommand
+::HandleArgs(cmTarget *tgt, const std::string &sdkName, const std::string &sdkVersion)
+{
+    tgt->AppendProperty("VS_EXTENSION_SDK_REFERENCES", this->Join(sdkName, sdkVersion).c_str());
+}
diff --git a/Source/cmAddTargetVsExtensionSdkCommand.h b/Source/cmAddTargetVsExtensionSdkCommand.h
new file mode 100644
index 0000000..5edd361
--- /dev/null
+++ b/Source/cmAddTargetVsExtensionSdkCommand.h
@@ -0,0 +1,58 @@
+/*============================================================================
+CMake - Cross Platform Makefile Generator
+Copyright 2000-2009 Kitware, Inc., Insight Software Consortium
+
+Distributed under the OSI-approved BSD License (the "License");
+see accompanying file Copyright.txt for details.
+
+This software is distributed WITHOUT ANY WARRANTY; without even the
+implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+See the License for more information.
+============================================================================*/
+#ifndef cmAddTargetVsExtensionSdkCommand_h
+#define cmAddTargetVsExtensionSdkCommand_h
+
+#include "cmCommand.h"
+
+/** \class cmAddTargetVsExtensionSdkCommand
+* \brief Specify an Visual Studio Extension SDK for inclusion in the the target project.
+*
+* cmAddTargetVsExtensionSdkCommand is used to specify an Visual Studio
+* Extension SDK for inclusion in the target project generated by CMake.
+*/
+class cmAddTargetVsExtensionSdkCommand : public cmCommand
+{
+public:
+    /**
+    * This is a virtual constructor for the command.
+    */
+    virtual cmCommand* Clone()
+    {
+        return new cmAddTargetVsExtensionSdkCommand;
+    }
+
+    /**
+    * This is called when the command is first encountered in
+    * the CMakeLists.txt file.
+    */
+    virtual bool InitialPass(std::vector<std::string> const& args,
+        cmExecutionStatus &status);
+
+    /**
+    * The name of the command as specified in CMakeList.txt.
+    */
+    virtual std::string GetName() const { return "add_target_vs_extension_sdk"; }
+
+    cmTypeMacro(cmAddTargetVsExtensionSdkCommand, cmCommand);
+
+private:
+    bool HandleArguments(std::vector<std::string> const& args);
+    void HandleImportedTarget(const std::string &tgt);
+    void HandleMissingTarget(const std::string &name);
+
+    void HandleArgs(cmTarget *tgt, const std::string &sdkName, const std::string &sdkVersion);
+
+    std::string Join(const std::string &sdkName, const std::string &sdkVersion);
+};
+
+#endif //cmAddTargetVsExtensionSdkCommand_h
\ No newline at end of file
diff --git a/Source/cmVisualStudio10TargetGenerator.cxx b/Source/cmVisualStudio10TargetGenerator.cxx
index 38e5e87..76003d3 100644
--- a/Source/cmVisualStudio10TargetGenerator.cxx
+++ b/Source/cmVisualStudio10TargetGenerator.cxx
@@ -3096,38 +3096,61 @@ void cmVisualStudio10TargetGenerator::WriteSDKReferenceDirectoryRoot()
 
 void cmVisualStudio10TargetGenerator::WriteSDKReferences()
 {
+  const char* desktopExtensionsVersion = NULL;
+  const char* mobileExtensionsVersion = NULL;
+  const char* iotExtensionsVersion = NULL;
+  const char* vsSdkReferences =
+      this->Target->GetProperty("VS_EXTENSION_SDK_REFERENCES");
+
   // This only applies to Windows 10 apps
   if (this->GlobalGenerator->TargetsWindowsStore() &&
       cmHasLiteralPrefix(this->GlobalGenerator->GetSystemVersion(), "10.0"))
     {
-    const char* desktopExtensionsVersion =
+    desktopExtensionsVersion =
       this->Target->GetProperty("VS_DESKTOP_EXTENSIONS_VERSION");
-    const char* mobileExtensionsVersion =
+    mobileExtensionsVersion =
       this->Target->GetProperty("VS_MOBILE_EXTENSIONS_VERSION");
-    const char* iotExtensionsVersion =
+    iotExtensionsVersion =
       this->Target->GetProperty("VS_IOT_EXTENSIONS_VERSION");
+    }
 
-    if(desktopExtensionsVersion || mobileExtensionsVersion ||
-       iotExtensionsVersion)
+  if(desktopExtensionsVersion || mobileExtensionsVersion ||
+     iotExtensionsVersion || vsSdkReferences)
+    {
+    this->WriteString("<ItemGroup>\n", 1);
+    if(desktopExtensionsVersion)
       {
-      this->WriteString("<ItemGroup>\n", 1);
-      if(desktopExtensionsVersion)
-        {
-        this->WriteSingleSDKReference("WindowsDesktop",
-                                      desktopExtensionsVersion);
-        }
-      if(mobileExtensionsVersion)
-        {
-        this->WriteSingleSDKReference("WindowsMobile",
-                                      mobileExtensionsVersion);
-        }
-      if(iotExtensionsVersion)
-        {
-        this->WriteSingleSDKReference("WindowsIoT",
-                                      iotExtensionsVersion);
-        }
-      this->WriteString("</ItemGroup>\n", 1);
+      this->WriteSingleSDKReference("WindowsDesktop",
+                                    desktopExtensionsVersion);
+      }
+    if(mobileExtensionsVersion)
+      {
+      this->WriteSingleSDKReference("WindowsMobile",
+                                    mobileExtensionsVersion);
+      }
+    if(iotExtensionsVersion)
+      {
+      this->WriteSingleSDKReference("WindowsIoT",
+                                    iotExtensionsVersion);
+      }
+    if (vsSdkReferences)
+      {
+      this->WriteVsExtensionSdkReferencesItems(vsSdkReferences);
       }
+    
+    this->WriteString("</ItemGroup>\n", 1);
+    }
+}
+
+void cmVisualStudio10TargetGenerator::WriteVsExtensionSdkReferencesItems(const char* references_value)
+{
+    std::vector<std::string> references;
+    cmSystemTools::ExpandListArgument(references_value, references);
+    for (std::vector<std::string>::iterator ri = references.begin();
+    ri != references.end(); ++ri)
+    {
+        this->WriteString("<SDKReference Include=\"", 2);
+        (*this->BuildFileStream) << cmVS10EscapeXML(*ri) << "\" />\n";
     }
 }
 
diff --git a/Source/cmVisualStudio10TargetGenerator.h b/Source/cmVisualStudio10TargetGenerator.h
index 47487e1..32fd1f6 100644
--- a/Source/cmVisualStudio10TargetGenerator.h
+++ b/Source/cmVisualStudio10TargetGenerator.h
@@ -134,6 +134,7 @@ class cmVisualStudio10TargetGenerator
                                     std::string const& version);
   void WriteSDKReferenceDirectoryRoot();
   void WriteSDKReferences();
+  void WriteVsExtensionSdkReferencesItems(const char* references_value);
   void WriteSingleSDKReference(std::string const& extension,
                                std::string const& version);
   void WriteCommonMissingFiles(const std::string& manifestFile);

From fd0396c0f64e2381dc4b3f6422086d3d4bc366da Mon Sep 17 00:00:00 2001
From: Artem Lapitskiy <a_lapitskiy@wargaming.net>
Date: Fri, 4 Dec 2015 18:08:44 +0300
Subject: [PATCH 3/3] Added manual files for new commands/properties

---
 Auxiliary/cmake-syntax.vim                        |  2 +-
 Help/command/add_target_vs_extension_sdk.rst      | 15 +++++++++++++++
 Help/manual/cmake-commands.7.rst                  |  1 +
 Help/manual/cmake-properties.7.rst                |  1 +
 Help/prop_tgt/VS_SDK_REFERENCE_DIRECTORY_ROOT.rst |  8 ++++++++
 5 files changed, 26 insertions(+), 1 deletion(-)
 create mode 100644 Help/command/add_target_vs_extension_sdk.rst
 create mode 100644 Help/prop_tgt/VS_SDK_REFERENCE_DIRECTORY_ROOT.rst

diff --git a/Auxiliary/cmake-syntax.vim b/Auxiliary/cmake-syntax.vim
index 624a8c4..6463e15 100644
--- a/Auxiliary/cmake-syntax.vim
+++ b/Auxiliary/cmake-syntax.vim
@@ -50,7 +50,7 @@ syn keyword cmakeDeprecated ABSTRACT_FILES BUILD_NAME SOURCE_FILES SOURCE_FILES_
 
 " The keywords are generated as:  cmake --help-command-list | tr "\n" " " | tr "[:lower:]" "[:upper:]"
 syn keyword cmakeStatement
-            \ ADD_COMPILE_OPTIONS ADD_CUSTOM_COMMAND ADD_CUSTOM_TARGET ADD_DEFINITIONS ADD_DEPENDENCIES ADD_EXECUTABLE ADD_LIBRARY ADD_SUBDIRECTORY ADD_TEST AUX_SOURCE_DIRECTORY BREAK BUILD_COMMAND BUILD_NAME CMAKE_HOST_SYSTEM_INFORMATION CMAKE_MINIMUM_REQUIRED CMAKE_POLICY CONFIGURE_FILE CREATE_TEST_SOURCELIST CTEST_BUILD CTEST_CONFIGURE CTEST_COVERAGE CTEST_EMPTY_BINARY_DIRECTORY CTEST_MEMCHECK CTEST_READ_CUSTOM_FILES CTEST_RUN_SCRIPT CTEST_SLEEP CTEST_START CTEST_SUBMIT CTEST_TEST CTEST_UPDATE CTEST_UPLOAD DEFINE_PROPERTY ELSE ELSEIF ENABLE_LANGUAGE ENABLE_TESTING ENDFOREACH ENDFUNCTION ENDIF ENDMACRO ENDWHILE EXEC_PROGRAM EXECUTE_PROCESS EXPORT EXPORT_LIBRARY_DEPENDENCIES FILE FIND_FILE FIND_LIBRARY FIND_PACKAGE FIND_PATH FIND_PROGRAM FLTK_WRAP_UI FOREACH FUNCTION GET_CMAKE_PROPERTY GET_DIRECTORY_PROPERTY GET_FILENAME_COMPONENT GET_PROPERTY GET_SOURCE_FILE_PROPERTY GET_TARGET_PROPERTY GET_TEST_PROPERTY IF INCLUDE INCLUDE_DIRECTORIES INCLUDE_EXTERNAL_MSPROJECT INCLUDE_REGULAR_EXPRESSION INSTALL INSTALL_FILES INSTALL_PROGRAMS INSTALL_TARGETS LINK_DIRECTORIES LINK_LIBRARIES LIST LOAD_CACHE LOAD_COMMAND MACRO MAKE_DIRECTORY MARK_AS_ADVANCED MATH MESSAGE OPTION OUTPUT_REQUIRED_FILES PROJECT QT_WRAP_CPP QT_WRAP_UI REMOVE REMOVE_DEFINITIONS RETURN SEPARATE_ARGUMENTS SET SET_DIRECTORY_PROPERTIES SET_PROPERTY SET_SOURCE_FILES_PROPERTIES SET_TARGET_PROPERTIES SET_TESTS_PROPERTIES SITE_NAME SOURCE_GROUP STRING SUBDIR_DEPENDS SUBDIRS TARGET_COMPILE_DEFINITIONS TARGET_COMPILE_FEATURES TARGET_COMPILE_OPTIONS TARGET_INCLUDE_DIRECTORIES TARGET_LINK_LIBRARIES TARGET_SOURCES TRY_COMPILE TRY_RUN UNSET USE_MANGLED_MESA UTILITY_SOURCE VARIABLE_REQUIRES VARIABLE_WATCH WHILE WRITE_FILE
+            \ ADD_COMPILE_OPTIONS ADD_CUSTOM_COMMAND ADD_CUSTOM_TARGET ADD_DEFINITIONS ADD_DEPENDENCIES ADD_EXECUTABLE ADD_LIBRARY ADD_SUBDIRECTORY ADD_TARGET_VS_EXTENSION_SDK ADD_TEST AUX_SOURCE_DIRECTORY BREAK BUILD_COMMAND BUILD_NAME CMAKE_HOST_SYSTEM_INFORMATION CMAKE_MINIMUM_REQUIRED CMAKE_POLICY CONFIGURE_FILE CREATE_TEST_SOURCELIST CTEST_BUILD CTEST_CONFIGURE CTEST_COVERAGE CTEST_EMPTY_BINARY_DIRECTORY CTEST_MEMCHECK CTEST_READ_CUSTOM_FILES CTEST_RUN_SCRIPT CTEST_SLEEP CTEST_START CTEST_SUBMIT CTEST_TEST CTEST_UPDATE CTEST_UPLOAD DEFINE_PROPERTY ELSE ELSEIF ENABLE_LANGUAGE ENABLE_TESTING ENDFOREACH ENDFUNCTION ENDIF ENDMACRO ENDWHILE EXEC_PROGRAM EXECUTE_PROCESS EXPORT EXPORT_LIBRARY_DEPENDENCIES FILE FIND_FILE FIND_LIBRARY FIND_PACKAGE FIND_PATH FIND_PROGRAM FLTK_WRAP_UI FOREACH FUNCTION GET_CMAKE_PROPERTY GET_DIRECTORY_PROPERTY GET_FILENAME_COMPONENT GET_PROPERTY GET_SOURCE_FILE_PROPERTY GET_TARGET_PROPERTY GET_TEST_PROPERTY IF INCLUDE INCLUDE_DIRECTORIES INCLUDE_EXTERNAL_MSPROJECT INCLUDE_REGULAR_EXPRESSION INSTALL INSTALL_FILES INSTALL_PROGRAMS INSTALL_TARGETS LINK_DIRECTORIES LINK_LIBRARIES LIST LOAD_CACHE LOAD_COMMAND MACRO MAKE_DIRECTORY MARK_AS_ADVANCED MATH MESSAGE OPTION OUTPUT_REQUIRED_FILES PROJECT QT_WRAP_CPP QT_WRAP_UI REMOVE REMOVE_DEFINITIONS RETURN SEPARATE_ARGUMENTS SET SET_DIRECTORY_PROPERTIES SET_PROPERTY SET_SOURCE_FILES_PROPERTIES SET_TARGET_PROPERTIES SET_TESTS_PROPERTIES SITE_NAME SOURCE_GROUP STRING SUBDIR_DEPENDS SUBDIRS TARGET_COMPILE_DEFINITIONS TARGET_COMPILE_FEATURES TARGET_COMPILE_OPTIONS TARGET_INCLUDE_DIRECTORIES TARGET_LINK_LIBRARIES TARGET_SOURCES TRY_COMPILE TRY_RUN UNSET USE_MANGLED_MESA UTILITY_SOURCE VARIABLE_REQUIRES VARIABLE_WATCH WHILE WRITE_FILE
             \ nextgroup=cmakeArguments
 syn keyword cmakeTodo
             \ TODO FIXME XXX
diff --git a/Help/command/add_target_vs_extension_sdk.rst b/Help/command/add_target_vs_extension_sdk.rst
new file mode 100644
index 0000000..2d2fca2
--- /dev/null
+++ b/Help/command/add_target_vs_extension_sdk.rst
@@ -0,0 +1,15 @@
+add_target_vs_extension_sdk
+--------------------------
+
+Add a reference to Extension SDK in the target Visual Studio project.
+
+::
+
+  add_target_vs_extension_sdk(target
+                              extensionName
+                              extensionVersion)
+
+Adds a reference to an Extension SDK in the target Visual Studio project.
+``extensionName`` is the name of extension (for example ``Bing.Maps.Xaml``).
+``extensionVersion`` is the version of Extension SDK that will be referenced. 
+(for example ``1.313.0825.0``).
\ No newline at end of file
diff --git a/Help/manual/cmake-commands.7.rst b/Help/manual/cmake-commands.7.rst
index 5b92b51..5777454 100644
--- a/Help/manual/cmake-commands.7.rst
+++ b/Help/manual/cmake-commands.7.rst
@@ -23,6 +23,7 @@ These commands may be used freely in CMake projects.
    /command/add_executable
    /command/add_library
    /command/add_subdirectory
+   /command/add_target_vs_extension_sdk
    /command/add_test
    /command/aux_source_directory
    /command/break
diff --git a/Help/manual/cmake-properties.7.rst b/Help/manual/cmake-properties.7.rst
index 931363c..babb4cd 100644
--- a/Help/manual/cmake-properties.7.rst
+++ b/Help/manual/cmake-properties.7.rst
@@ -269,6 +269,7 @@ Properties on Targets
    /prop_tgt/VS_SCC_LOCALPATH
    /prop_tgt/VS_SCC_PROJECTNAME
    /prop_tgt/VS_SCC_PROVIDER
+   /prop_tgt/VS_SDK_REFERENCE_DIRECTORY_ROOT
    /prop_tgt/VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION
    /prop_tgt/VS_WINRT_COMPONENT
    /prop_tgt/VS_WINRT_EXTENSIONS
diff --git a/Help/prop_tgt/VS_SDK_REFERENCE_DIRECTORY_ROOT.rst b/Help/prop_tgt/VS_SDK_REFERENCE_DIRECTORY_ROOT.rst
new file mode 100644
index 0000000..e4a7eaf
--- /dev/null
+++ b/Help/prop_tgt/VS_SDK_REFERENCE_DIRECTORY_ROOT.rst
@@ -0,0 +1,8 @@
+VS_SDK_REFERENCE_DIRECTORY_ROOT
+-------------------------
+
+Visual Studio Extension SDKs Root Directory
+
+Adds one or more semicolon-delimited pathes to Visual Studio Extension SDKs Root 
+Directory. Each path specifies a directory that will be used to locate Extension SDKs
+referenced by the target Visual Studio project.
\ No newline at end of file
