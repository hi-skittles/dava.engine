import binascii
import os.path
import filecmp
import subprocess
import zipfile

from PIL import Image, ImageChops


def call(*arg): 
	print "subprocess.call " + "[%s]" % ", ".join(map(str, arg))
	subprocess.call(arg)
	
def zip(src, dst):
	zf = zipfile.ZipFile("%s.zip" % (dst), "w")
	for dirname, subdirs, files in os.walk(src):
		for filename in files:
			zf.write(os.path.join(dirname, filename))
	zf.close()

	
# Function for comparing files, generated by UIEditor
def compare_txt(expected, actual):  
	if not os.path.exists(actual):
		return "File is not created: " + actual
			
	if not filecmp.cmp(expected,actual):
		return "File %s is not equal to expected" % actual

def compare_tex(expected, actual):
	if not os.path.exists(actual):
		return "File is not created: " + actual
	
	text1 = open(expected, "rb").read() # Read expecting reult from file
	text2 = open(actual, "rb").read() # Read actual result from generated file
	
	text1_hex = binascii.hexlify(text1)
	text2_hex = binascii.hexlify(text2)
	
	if text1_hex != text2_hex:
		return "Tex files are not equals: %s\n%s\n%s" %(actual, text1_hex, text2_hex)

   
def compare_img(expected, actual):
	if not os.path.exists(actual):
		return "File is not created: " + actual
	
	im1 = Image.open(expected)
	im2 = Image.open(actual)
	data1 = list(im1.convert("RGBA").getdata())
	data2 = list(im2.convert("RGBA").getdata())
	
	difpic = 0
	if len(data1) != len(data2):
		return 100.0
	else:
		for i in xrange(0, len(data1)):
			difpic += compare_pixel(data1[i], data2[i])
		print "Different pixels: %d/%d" % (difpic, len(data1))
		return float(difpic) / len(data1)
		
def save_diff(expected, actual):
	im1 = Image.open(expected)
	im2 = Image.open(actual)
	ImageChops.difference(im1.convert('RGBA'), im2.convert('RGBA')).save(actual + "-diff1.png")
	ImageChops.difference(im1.convert('RGB'), im2.convert('RGB')).save(actual + "-diff2.png")

def compare_pixel(px1, px2):
	res = 0.0
	for i in xrange(0, 4):
		res += abs(px1[i] - px2[i]) / 1024.0
		
	return res > 0.03