#if VERTEX_FOG

    float4  FOG_result;
    
    float fogDistance = length(FOG_view_position);
    
    // calculating fog amoung, depending on distance 
    #if FOG_LINEAR
        FOG_result.w = (fogDistance - fogStart) / (fogEnd - fogStart);
    #else
        FOG_result.w = 1.0 - exp(-fogDensity * fogDistance);
    #endif
    
    // calculating view direction in world space, point of view in world space
    #if FOG_HALFSPACE || FOG_ATMOSPHERE_MAP
        float3 viewPointWorldSpace = FOG_world_position;
        float3 viewDirectionWorldSpace = viewPointWorldSpace - FOG_eye_position;
    #endif
    
    // calculating halfSpaceFog amoung
    #if FOG_HALFSPACE
        #if FOG_HALFSPACE_LINEAR
            // view http://www.terathon.com/lengyel/Lengyel-UnifiedFog.pdf
            // to get more clear understanding about this calculations
            float fogK = step( FOG_eye_position.z, fogHalfspaceHeight );
            float fogFdotP = viewPointWorldSpace.z - fogHalfspaceHeight;
            float fogFdotC = FOG_eye_position.z - fogHalfspaceHeight;
            
            float fogC1 = fogK * (fogFdotP + fogFdotC);
            float fogC2 = (1.0 - 2.0 * fogK) * fogFdotP;
            float fogG = min(fogC2, 0.0);
            fogG = -length(viewDirectionWorldSpace) * fogHalfspaceDensity * (fogC1 - fogG * fogG / abs(viewDirectionWorldSpace.z));
            
            float halfSpaceFogAmoung = 1.0 - exp2(-fogG);
        #else
            float fogK = viewDirectionWorldSpace.z / fogDistance;
            float fogB = FOG_eye_position.z - fogHalfspaceHeight;
            
            float halfSpaceFogAmoung = fogHalfspaceDensity * exp(-fogHalfspaceFalloff * fogB) * (1.0 - exp(-fogHalfspaceFalloff * fogK * fogDistance)) / fogK;
        #endif
        FOG_result.w = FOG_result.w + clamp(halfSpaceFogAmoung, 0.0, fogHalfspaceLimit);
    #endif

    // limit fog amoung
    FOG_result.w = clamp( FOG_result.w, 0.0, fogLimit );
    
    // calculating fog color
    #if FOG_ATMOSPHERE
        float3 atmosphereColor;
        #if FOG_ATMOSPHERE_MAP
            float3 viewDirection = normalize(float3(mul(float4(FOG_in_position.xyz,1.0),worldMatrix)) - FOG_eye_position);
            viewDirection.z = clamp(viewDirection.z, 0.01, 1.0);
            atmosphereColor = textureCube(atmospheremap, viewDirection).xyz;
        #elif FOG_ATMOSPHERE_NO_SCATTERING
            atmosphereColor = fogAtmosphereColorSky;
        #else
            float atmospheteAngleFactor = dot(normalize(FOG_view_position), normalize(FOG_to_light_dir)) * 0.5 + 0.5;
            atmosphereColor = lerp(fogAtmosphereColorSky, fogAtmosphereColorSun, pow(atmospheteAngleFactor, fogAtmosphereScattering));
        #endif

        #if FOG_ATMOSPHERE_NO_ATTENUATION
            FOG_result.xyz = atmosphereColor;
        #else
            half fogAtmosphereAttenuation = clamp(fogDistance / fogAtmosphereDistance, 0.0, 1.0);
            FOG_result.xyz = lerp(fogColor, atmosphereColor, float(fogAtmosphereAttenuation) );
        #endif

    #else
        FOG_result.xyz = fogColor;
    #endif
    
#endif