diff --git a/googlemock/include/gmock/gmock-spec-builders.h b/googlemock/include/gmock/gmock-spec-builders.h
index fed7de6..9a66adf 100644
--- a/googlemock/include/gmock/gmock-spec-builders.h
+++ b/googlemock/include/gmock/gmock-spec-builders.h
@@ -134,6 +134,9 @@ class GTEST_API_ UntypedFunctionMockerBase {
   bool VerifyAndClearExpectationsLocked()
       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);
 
+  bool HasNotSatisfiedExpectationLocked()
+      GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);
+
   // Clears the ON_CALL()s set on this mock function.
   virtual void ClearDefaultActionsLocked()
       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) = 0;
@@ -389,6 +392,12 @@ class GTEST_API_ Mock {
   static bool VerifyAndClear(void* mock_obj)
       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);
 
+  static bool VerifyAndClear()
+      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);
+
+  static bool HasNotSatisfiedExpectation()
+      GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);
+
  private:
   friend class internal::UntypedFunctionMockerBase;
 
diff --git a/googlemock/src/gmock-spec-builders.cc b/googlemock/src/gmock-spec-builders.cc
index 9551342..c44cbf8 100644
--- a/googlemock/src/gmock-spec-builders.cc
+++ b/googlemock/src/gmock-spec-builders.cc
@@ -509,6 +509,20 @@ bool UntypedFunctionMockerBase::VerifyAndClearExpectationsLocked()
   return expectations_met;
 }
 
+bool UntypedFunctionMockerBase::HasNotSatisfiedExpectationLocked()
+{
+  g_gmock_mutex.AssertHeld();
+  for (UntypedExpectations::const_iterator it = untyped_expectations_.begin();
+       it != untyped_expectations_.end(); ++it) {
+    ExpectationBase* const untyped_expectation = it->get();
+    if (!untyped_expectation->IsSatisfied()) {
+      return true;
+    }
+  }
+
+  return false;
+}
+
 }  // namespace internal
 
 // Class Mock.
@@ -679,6 +693,43 @@ bool Mock::VerifyAndClear(void* mock_obj)
   return VerifyAndClearExpectationsLocked(mock_obj);
 }
 
+bool Mock::VerifyAndClear()
+    GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex) {
+  internal::MutexLock l(&internal::g_gmock_mutex);
+  bool result = true;
+  for (MockObjectRegistry::StateMap::iterator it =
+           g_mock_object_registry.states().begin();
+       it != g_mock_object_registry.states().end(); ++it) {
+    void* mock_obj = const_cast<void*>(it->first);
+    ClearDefaultActionsLocked(mock_obj);
+    result &= VerifyAndClearExpectationsLocked(mock_obj);
+  }
+
+  return result;
+}
+
+bool Mock::HasNotSatisfiedExpectation()
+    GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex) {
+  internal::MutexLock l(&internal::g_gmock_mutex);
+  if (g_mock_object_registry.states().empty())
+  {
+    return false;
+  }
+
+  for (MockObjectRegistry::StateMap::iterator it =
+           g_mock_object_registry.states().begin();
+       it != g_mock_object_registry.states().end(); ++it) {
+    FunctionMockers& mockers = it->second.function_mockers;
+    for (FunctionMockers::const_iterator it = mockers.begin();
+         it != mockers.end(); ++it){
+      if ((*it)->HasNotSatisfiedExpectationLocked())
+        return true;
+    }
+  }
+
+  return false;
+}
+
 // Verifies and clears all expectations on the given mock object.  If
 // the expectations aren't satisfied, generates one or more Google
 // Test non-fatal failures and returns false.
