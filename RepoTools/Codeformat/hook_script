#!/bin/sh

exec_clang_format() 
{
	files="${1}"
	if [ -z "${files}" ]; then
        return
    fi

	python RepoTools/codeformat/git-clang-format.py --binary RepoTools/codeformat/clang-format --style file ${files}
	error_code=$?

	if [ $error_code -ne 0 ]; then
        exit $error_code
    else
		git add -f ${files}
    fi  
}

files=""

# list of directories to exclude from clang-format
# usually directories where third-party headers are stored
exclude_list=(
    "Libs"
    "Modules/CEFWebview"
)
exclude_pattern=$(echo ${exclude_list[@]}|tr " " "|")

# collect files that should be formated during this commit
for file in `git diff-index --cached --name-only HEAD | grep -E "Modules|Programs|Sources/Internal" | grep -Ev "${exclude_pattern}"` ; do

	# collect only existed files
	if [ -f ${file} ]; then

		# collect only file, that are
		# matched specified extensions 
		case "$file" in
			*.cpp | *.h | *.mm | *.unittest)
				files="$files $file"
			;;
			*)
			;;
		esac

		# if collected files string length is greater 
		# than 2048 exec clang format
		if [ ${#files} -ge 4096 ]; then
			exec_clang_format "${files}"
			files=""
		fi
	fi
done

# exec clang format for the rest files
exec_clang_format "${files}"
